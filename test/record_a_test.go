/*
IbClient

Testing RecordaAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dns

import (
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/unasra/nios-go-client/dns"
)

func TestCreateARecord(t *testing.T) {
	apiClient := dns.NewAPIClient()
	RecordA := dns.RecordARequest{
		Name:     dns.PtrString("test.example.com"),
		Ipv4addr: dns.PtrString("192.0.2.1"),
	}
	resp, httpRes, err := apiClient.RecordaAPI.Post(context.Background()).RecordARequest(RecordA).Execute()

	if err != nil {
		t.Errorf("Error: %v", err)
	}
	require.Nil(t, err)
	require.NotNil(t, resp)
	assert.Equal(t, 201, httpRes.StatusCode)
}

func TestGetARecords(t *testing.T) {
	apiClient := dns.NewAPIClient()
	resp, httpRes, err := apiClient.RecordaAPI.Get(context.Background()).Execute()

	if err != nil {
		t.Errorf("Error: %v", err)
	}

	// for i, record := range resp {
	// 	fmt.Println(i, *record.Name, *record.Ipv4addr)
	// }

	// fmt.Println(*resp[0].Name)
	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
}

func TestGetARecordsasObject(t *testing.T) {
	apiClient := dns.NewAPIClient()
	resp, httpRes, err := apiClient.RecordaAPI.Get(context.Background()).ReturnAsObject(1).Execute()

	if err != nil {
		t.Errorf("Error: %v", err)
	}

	// for i, record := range resp {
	// 	fmt.Println(i, *record.Name, *record.Ipv4addr)
	// }

	//fmt.Println(*resp[0].Name)
	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
}

func TestGetARecordByReference(t *testing.T) {

	apiClient := dns.NewAPIClient()
	recordaReference := "ZG5zLmJpbmRfYSQuMi5jb20uZXhhbXBsZSxhLTIsMTAuMC4wLjA"

	resp, httpRes, err := apiClient.RecordaAPI.RecordaReferenceGet(context.Background(), recordaReference).Execute()

	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
	assert.Nil(t, err)
}

func TestUpdateARecord(t *testing.T) {
	apiClient := dns.NewAPIClient()
	RecordA := dns.RecordARequest{
		Name: dns.PtrString("test1.example.com"),
	}
	recordaReference := "ZG5zLmJpbmRfYSQuX2RlZmF1bHQuY29tLmV4YW1wbGUsdGVzdCwxOTIuMC4yLjE"

	resp, httpRes, err := apiClient.RecordaAPI.RecordaReferencePut(context.Background(), recordaReference).RecordARequest(RecordA).Execute()

	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
	assert.Nil(t, err)
	fmt.Println(resp)
}

func TestDeleteARecord(t *testing.T) {
	apiClient := dns.NewAPIClient()
	recordaReference := "ZG5zLmJpbmRfYSQuX2RlZmF1bHQuY29tLmV4YW1wbGUsdGVzdDEsMTkyLjAuMi4x"

	resp, httpRes, err := apiClient.RecordaAPI.RecordaReferenceDelete(context.Background(), recordaReference).Execute()

	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
	assert.Nil(t, err)
	fmt.Println(resp)
}

// func TestRecordaAPIService(t *testing.T) {

// 	apiClient := dns.NewAPIClient()

// 	t.Run("Test RecordaAPIService Get", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		resp, httpRes, err := apiClient.RecordaAPI.Get(context.Background()).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test RecordaAPIService Post", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		resp, httpRes, err := apiClient.RecordaAPI.Post(context.Background()).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test RecordaAPIService RecordaReferenceDelete", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var recordaReference string

// 		resp, httpRes, err := apiClient.RecordaAPI.RecordaReferenceDelete(context.Background(), recordaReference).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test RecordaAPIService RecordaReferenceGet", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var recordaReference string

// 		resp, httpRes, err := apiClient.RecordaAPI.RecordaReferenceGet(context.Background(), recordaReference).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// 	t.Run("Test RecordaAPIService RecordaReferencePut", func(t *testing.T) {

// 		t.Skip("skip test") // remove to run test

// 		var recordaReference string

// 		resp, httpRes, err := apiClient.RecordaAPI.RecordaReferencePut(context.Background(), recordaReference).Execute()

// 		require.Nil(t, err)
// 		require.NotNil(t, resp)
// 		assert.Equal(t, 200, httpRes.StatusCode)

// 	})

// }
