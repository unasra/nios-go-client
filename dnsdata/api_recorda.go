/*
Infoblox WAPI Swagger for DNS ( wapi version - 2.12.3 )

OpenAPI 3.x.x specification for the IbClient API

API version: 2.12.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsdata

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/unasra/nios-go-client/internal"
)

type RecordaAPI interface {
	/*
		WapiV2123RecordaGet List all A records

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordaAPIWapiV2123RecordaGetRequest
	*/
	WapiV2123RecordaGet(ctx context.Context) RecordaAPIWapiV2123RecordaGetRequest

	// WapiV2123RecordaGetExecute executes the request
	//  @return RecordA
	WapiV2123RecordaGetExecute(r RecordaAPIWapiV2123RecordaGetRequest) (*RecordA, *http.Response, error)
	/*
		WapiV2123RecordaPost Method for WapiV2123RecordaPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordaAPIWapiV2123RecordaPostRequest
	*/
	WapiV2123RecordaPost(ctx context.Context) RecordaAPIWapiV2123RecordaPostRequest

	// WapiV2123RecordaPostExecute executes the request
	//  @return RecordA
	WapiV2123RecordaPostExecute(r RecordaAPIWapiV2123RecordaPostRequest) (*RecordA, *http.Response, error)
	/*
		WapiV2123RecordaRecordaReferenceDelete Method for WapiV2123RecordaRecordaReferenceDelete

		Delete the record:a resource

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param recordaReference Enter the reference for record:a
		@return RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest
	*/
	WapiV2123RecordaRecordaReferenceDelete(ctx context.Context, recordaReference string) RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest

	// WapiV2123RecordaRecordaReferenceDeleteExecute executes the request
	//  @return WapiV2123RecordARecordAReferenceDelete200Response
	WapiV2123RecordaRecordaReferenceDeleteExecute(r RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest) (*WapiV2123RecordARecordAReferenceDelete200Response, *http.Response, error)
	/*
		WapiV2123RecordaRecordaReferenceGet Method for WapiV2123RecordaRecordaReferenceGet

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param recordaReference Enter the reference for record:a
		@return RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest
	*/
	WapiV2123RecordaRecordaReferenceGet(ctx context.Context, recordaReference string) RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest

	// WapiV2123RecordaRecordaReferenceGetExecute executes the request
	//  @return RecordA
	WapiV2123RecordaRecordaReferenceGetExecute(r RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest) (*RecordA, *http.Response, error)
	/*
		WapiV2123RecordaRecordaReferencePut Method for WapiV2123RecordaRecordaReferencePut

		Update the record:a resource

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param recordaReference Enter the reference for record:a
		@return RecordaAPIWapiV2123RecordaRecordaReferencePutRequest
	*/
	WapiV2123RecordaRecordaReferencePut(ctx context.Context, recordaReference string) RecordaAPIWapiV2123RecordaRecordaReferencePutRequest

	// WapiV2123RecordaRecordaReferencePutExecute executes the request
	//  @return RecordA
	WapiV2123RecordaRecordaReferencePutExecute(r RecordaAPIWapiV2123RecordaRecordaReferencePutRequest) (*RecordA, *http.Response, error)
}

// RecordaAPIService RecordaAPI service
type RecordaAPIService internal.Service

type RecordaAPIWapiV2123RecordaGetRequest struct {
	ctx            context.Context
	ApiService     RecordaAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	comment        *string
	creator        *string
	ddnsPrincipal  *string
	ipv4addr       *string
	name           *string
	reclaimable    *string
	view           *string
	zone           *string
}

// Enter the field names followed by comma
func (r RecordaAPIWapiV2123RecordaGetRequest) ReturnFields(returnFields string) RecordaAPIWapiV2123RecordaGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordaAPIWapiV2123RecordaGetRequest) ReturnFields2(returnFields2 string) RecordaAPIWapiV2123RecordaGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordaAPIWapiV2123RecordaGetRequest) MaxResults(maxResults int32) RecordaAPIWapiV2123RecordaGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordaAPIWapiV2123RecordaGetRequest) ReturnAsObject(returnAsObject int32) RecordaAPIWapiV2123RecordaGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.
func (r RecordaAPIWapiV2123RecordaGetRequest) Paging(paging int32) RecordaAPIWapiV2123RecordaGetRequest {
	r.paging = &paging
	return r
}

// Enter the page ID for fetching the next page
func (r RecordaAPIWapiV2123RecordaGetRequest) PageId(pageId string) RecordaAPIWapiV2123RecordaGetRequest {
	r.pageId = &pageId
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) Comment(comment string) RecordaAPIWapiV2123RecordaGetRequest {
	r.comment = &comment
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) Creator(creator string) RecordaAPIWapiV2123RecordaGetRequest {
	r.creator = &creator
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) DdnsPrincipal(ddnsPrincipal string) RecordaAPIWapiV2123RecordaGetRequest {
	r.ddnsPrincipal = &ddnsPrincipal
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) Ipv4addr(ipv4addr string) RecordaAPIWapiV2123RecordaGetRequest {
	r.ipv4addr = &ipv4addr
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) Name(name string) RecordaAPIWapiV2123RecordaGetRequest {
	r.name = &name
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) Reclaimable(reclaimable string) RecordaAPIWapiV2123RecordaGetRequest {
	r.reclaimable = &reclaimable
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) View(view string) RecordaAPIWapiV2123RecordaGetRequest {
	r.view = &view
	return r
}

// Enter the value of the field
func (r RecordaAPIWapiV2123RecordaGetRequest) Zone(zone string) RecordaAPIWapiV2123RecordaGetRequest {
	r.zone = &zone
	return r
}

func (r RecordaAPIWapiV2123RecordaGetRequest) Execute() (*RecordA, *http.Response, error) {
	return r.ApiService.WapiV2123RecordaGetExecute(r)
}

/*
WapiV2123RecordaGet List all A records

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordaAPIWapiV2123RecordaGetRequest
*/
func (a *RecordaAPIService) WapiV2123RecordaGet(ctx context.Context) RecordaAPIWapiV2123RecordaGetRequest {
	return RecordaAPIWapiV2123RecordaGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RecordA
func (a *RecordaAPIService) WapiV2123RecordaGetExecute(r RecordaAPIWapiV2123RecordaGetRequest) (*RecordA, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *RecordA
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordaAPIService.WapiV2123RecordaGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/wapi/v2.12.3/record:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "")
	} else {
		var defaultValue int32 = 0
		r.returnAsObject = &defaultValue
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "")
	} else {
		var defaultValue int32 = 0
		r.paging = &defaultValue
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "")
	}
	if r.comment != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "comment", r.comment, "")
	}
	if r.creator != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "creator", r.creator, "")
	}
	if r.ddnsPrincipal != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "ddns_principal", r.ddnsPrincipal, "")
	}
	if r.ipv4addr != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "ipv4addr", r.ipv4addr, "")
	}
	if r.name != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.reclaimable != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "reclaimable", r.reclaimable, "")
	}
	if r.view != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "view", r.view, "")
	}
	if r.zone != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "zone", r.zone, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordaAPIWapiV2123RecordaPostRequest struct {
	ctx            context.Context
	ApiService     RecordaAPI
	recordARequest *RecordARequest
	returnFields   *string
}

// Enter the request body here
func (r RecordaAPIWapiV2123RecordaPostRequest) RecordARequest(recordARequest RecordARequest) RecordaAPIWapiV2123RecordaPostRequest {
	r.recordARequest = &recordARequest
	return r
}

// Enter the field names followed by comma
func (r RecordaAPIWapiV2123RecordaPostRequest) ReturnFields(returnFields string) RecordaAPIWapiV2123RecordaPostRequest {
	r.returnFields = &returnFields
	return r
}

func (r RecordaAPIWapiV2123RecordaPostRequest) Execute() (*RecordA, *http.Response, error) {
	return r.ApiService.WapiV2123RecordaPostExecute(r)
}

/*
WapiV2123RecordaPost Method for WapiV2123RecordaPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordaAPIWapiV2123RecordaPostRequest
*/
func (a *RecordaAPIService) WapiV2123RecordaPost(ctx context.Context) RecordaAPIWapiV2123RecordaPostRequest {
	return RecordaAPIWapiV2123RecordaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RecordA
func (a *RecordaAPIService) WapiV2123RecordaPostExecute(r RecordaAPIWapiV2123RecordaPostRequest) (*RecordA, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *RecordA
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordaAPIService.WapiV2123RecordaPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/wapi/v2.12.3/record:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordARequest == nil {
		return localVarReturnValue, nil, internal.ReportError("recordARequest is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordARequest
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest struct {
	ctx              context.Context
	ApiService       RecordaAPI
	recordaReference string
}

func (r RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest) Execute() (*WapiV2123RecordARecordAReferenceDelete200Response, *http.Response, error) {
	return r.ApiService.WapiV2123RecordaRecordaReferenceDeleteExecute(r)
}

/*
WapiV2123RecordaRecordaReferenceDelete Method for WapiV2123RecordaRecordaReferenceDelete

Delete the record:a resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param recordaReference Enter the reference for record:a
	@return RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest
*/
func (a *RecordaAPIService) WapiV2123RecordaRecordaReferenceDelete(ctx context.Context, recordaReference string) RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest {
	return RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest{
		ApiService:       a,
		ctx:              ctx,
		recordaReference: recordaReference,
	}
}

// Execute executes the request
//
//	@return WapiV2123RecordARecordAReferenceDelete200Response
func (a *RecordaAPIService) WapiV2123RecordaRecordaReferenceDeleteExecute(r RecordaAPIWapiV2123RecordaRecordaReferenceDeleteRequest) (*WapiV2123RecordARecordAReferenceDelete200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *WapiV2123RecordARecordAReferenceDelete200Response
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordaAPIService.WapiV2123RecordaRecordaReferenceDelete")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/wapi/v2.12.3/record:a/{record:a_reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"record:a_reference"+"}", url.PathEscape(internal.ParameterValueToString(r.recordaReference, "recordaReference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest struct {
	ctx              context.Context
	ApiService       RecordaAPI
	recordaReference string
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest) ReturnFields(returnFields string) RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest) ReturnFields2(returnFields2 string) RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest) Execute() (*RecordA, *http.Response, error) {
	return r.ApiService.WapiV2123RecordaRecordaReferenceGetExecute(r)
}

/*
WapiV2123RecordaRecordaReferenceGet Method for WapiV2123RecordaRecordaReferenceGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param recordaReference Enter the reference for record:a
	@return RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest
*/
func (a *RecordaAPIService) WapiV2123RecordaRecordaReferenceGet(ctx context.Context, recordaReference string) RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest {
	return RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest{
		ApiService:       a,
		ctx:              ctx,
		recordaReference: recordaReference,
	}
}

// Execute executes the request
//
//	@return RecordA
func (a *RecordaAPIService) WapiV2123RecordaRecordaReferenceGetExecute(r RecordaAPIWapiV2123RecordaRecordaReferenceGetRequest) (*RecordA, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *RecordA
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordaAPIService.WapiV2123RecordaRecordaReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/wapi/v2.12.3/record:a/{record:a_reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"record:a_reference"+"}", url.PathEscape(internal.ParameterValueToString(r.recordaReference, "recordaReference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "")
	} else {
		var defaultValue int32 = 0
		r.returnAsObject = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordaAPIWapiV2123RecordaRecordaReferencePutRequest struct {
	ctx              context.Context
	ApiService       RecordaAPI
	recordaReference string
	recordARequest   *RecordARequest
	returnFields     *string
}

// Enter the request body here
func (r RecordaAPIWapiV2123RecordaRecordaReferencePutRequest) RecordARequest(recordARequest RecordARequest) RecordaAPIWapiV2123RecordaRecordaReferencePutRequest {
	r.recordARequest = &recordARequest
	return r
}

// Enter the field names followed by comma
func (r RecordaAPIWapiV2123RecordaRecordaReferencePutRequest) ReturnFields(returnFields string) RecordaAPIWapiV2123RecordaRecordaReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

func (r RecordaAPIWapiV2123RecordaRecordaReferencePutRequest) Execute() (*RecordA, *http.Response, error) {
	return r.ApiService.WapiV2123RecordaRecordaReferencePutExecute(r)
}

/*
WapiV2123RecordaRecordaReferencePut Method for WapiV2123RecordaRecordaReferencePut

Update the record:a resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param recordaReference Enter the reference for record:a
	@return RecordaAPIWapiV2123RecordaRecordaReferencePutRequest
*/
func (a *RecordaAPIService) WapiV2123RecordaRecordaReferencePut(ctx context.Context, recordaReference string) RecordaAPIWapiV2123RecordaRecordaReferencePutRequest {
	return RecordaAPIWapiV2123RecordaRecordaReferencePutRequest{
		ApiService:       a,
		ctx:              ctx,
		recordaReference: recordaReference,
	}
}

// Execute executes the request
//
//	@return RecordA
func (a *RecordaAPIService) WapiV2123RecordaRecordaReferencePutExecute(r RecordaAPIWapiV2123RecordaRecordaReferencePutRequest) (*RecordA, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *RecordA
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordaAPIService.WapiV2123RecordaRecordaReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/wapi/v2.12.3/record:a/{record:a_reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"record:a_reference"+"}", url.PathEscape(internal.ParameterValueToString(r.recordaReference, "recordaReference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordARequest == nil {
		return localVarReturnValue, nil, internal.ReportError("recordARequest is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordARequest
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
